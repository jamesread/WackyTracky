// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: wt.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	WackyTrackyClientService_Version_FullMethodName    = "/wackytracky.v1.WackyTrackyClientService/Version"
	WackyTrackyClientService_Init_FullMethodName       = "/wackytracky.v1.WackyTrackyClientService/Init"
	WackyTrackyClientService_GetLists_FullMethodName   = "/wackytracky.v1.WackyTrackyClientService/GetLists"
	WackyTrackyClientService_ListTasks_FullMethodName  = "/wackytracky.v1.WackyTrackyClientService/ListTasks"
	WackyTrackyClientService_CreateTask_FullMethodName = "/wackytracky.v1.WackyTrackyClientService/CreateTask"
	WackyTrackyClientService_DeleteTask_FullMethodName = "/wackytracky.v1.WackyTrackyClientService/DeleteTask"
	WackyTrackyClientService_CreateList_FullMethodName = "/wackytracky.v1.WackyTrackyClientService/CreateList"
	WackyTrackyClientService_Tag_FullMethodName        = "/wackytracky.v1.WackyTrackyClientService/Tag"
	WackyTrackyClientService_UpdateList_FullMethodName = "/wackytracky.v1.WackyTrackyClientService/UpdateList"
	WackyTrackyClientService_GetTags_FullMethodName    = "/wackytracky.v1.WackyTrackyClientService/GetTags"
)

// WackyTrackyClientServiceClient is the client API for WackyTrackyClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WackyTrackyClientServiceClient interface {
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
	GetLists(ctx context.Context, in *GetListsRequest, opts ...grpc.CallOption) (*GetListsResponse, error)
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error)
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error)
	CreateList(ctx context.Context, in *CreateListRequest, opts ...grpc.CallOption) (*CreateListResponse, error)
	Tag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagResponse, error)
	UpdateList(ctx context.Context, in *UpdateListRequest, opts ...grpc.CallOption) (*UpdateListResponse, error)
	GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (*GetTagsResponse, error)
}

type wackyTrackyClientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWackyTrackyClientServiceClient(cc grpc.ClientConnInterface) WackyTrackyClientServiceClient {
	return &wackyTrackyClientServiceClient{cc}
}

func (c *wackyTrackyClientServiceClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, WackyTrackyClientService_Version_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wackyTrackyClientServiceClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, WackyTrackyClientService_Init_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wackyTrackyClientServiceClient) GetLists(ctx context.Context, in *GetListsRequest, opts ...grpc.CallOption) (*GetListsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListsResponse)
	err := c.cc.Invoke(ctx, WackyTrackyClientService_GetLists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wackyTrackyClientServiceClient) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTasksResponse)
	err := c.cc.Invoke(ctx, WackyTrackyClientService_ListTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wackyTrackyClientServiceClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, WackyTrackyClientService_CreateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wackyTrackyClientServiceClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTaskResponse)
	err := c.cc.Invoke(ctx, WackyTrackyClientService_DeleteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wackyTrackyClientServiceClient) CreateList(ctx context.Context, in *CreateListRequest, opts ...grpc.CallOption) (*CreateListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateListResponse)
	err := c.cc.Invoke(ctx, WackyTrackyClientService_CreateList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wackyTrackyClientServiceClient) Tag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, WackyTrackyClientService_Tag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wackyTrackyClientServiceClient) UpdateList(ctx context.Context, in *UpdateListRequest, opts ...grpc.CallOption) (*UpdateListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateListResponse)
	err := c.cc.Invoke(ctx, WackyTrackyClientService_UpdateList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wackyTrackyClientServiceClient) GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (*GetTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTagsResponse)
	err := c.cc.Invoke(ctx, WackyTrackyClientService_GetTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WackyTrackyClientServiceServer is the server API for WackyTrackyClientService service.
// All implementations should embed UnimplementedWackyTrackyClientServiceServer
// for forward compatibility
type WackyTrackyClientServiceServer interface {
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	Init(context.Context, *InitRequest) (*InitResponse, error)
	GetLists(context.Context, *GetListsRequest) (*GetListsResponse, error)
	ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error)
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error)
	CreateList(context.Context, *CreateListRequest) (*CreateListResponse, error)
	Tag(context.Context, *TagRequest) (*TagResponse, error)
	UpdateList(context.Context, *UpdateListRequest) (*UpdateListResponse, error)
	GetTags(context.Context, *GetTagsRequest) (*GetTagsResponse, error)
}

// UnimplementedWackyTrackyClientServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWackyTrackyClientServiceServer struct {
}

func (UnimplementedWackyTrackyClientServiceServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedWackyTrackyClientServiceServer) Init(context.Context, *InitRequest) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedWackyTrackyClientServiceServer) GetLists(context.Context, *GetListsRequest) (*GetListsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLists not implemented")
}
func (UnimplementedWackyTrackyClientServiceServer) ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedWackyTrackyClientServiceServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedWackyTrackyClientServiceServer) DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedWackyTrackyClientServiceServer) CreateList(context.Context, *CreateListRequest) (*CreateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateList not implemented")
}
func (UnimplementedWackyTrackyClientServiceServer) Tag(context.Context, *TagRequest) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tag not implemented")
}
func (UnimplementedWackyTrackyClientServiceServer) UpdateList(context.Context, *UpdateListRequest) (*UpdateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateList not implemented")
}
func (UnimplementedWackyTrackyClientServiceServer) GetTags(context.Context, *GetTagsRequest) (*GetTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTags not implemented")
}

// UnsafeWackyTrackyClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WackyTrackyClientServiceServer will
// result in compilation errors.
type UnsafeWackyTrackyClientServiceServer interface {
	mustEmbedUnimplementedWackyTrackyClientServiceServer()
}

func RegisterWackyTrackyClientServiceServer(s grpc.ServiceRegistrar, srv WackyTrackyClientServiceServer) {
	s.RegisterService(&WackyTrackyClientService_ServiceDesc, srv)
}

func _WackyTrackyClientService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WackyTrackyClientServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WackyTrackyClientService_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WackyTrackyClientServiceServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WackyTrackyClientService_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WackyTrackyClientServiceServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WackyTrackyClientService_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WackyTrackyClientServiceServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WackyTrackyClientService_GetLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WackyTrackyClientServiceServer).GetLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WackyTrackyClientService_GetLists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WackyTrackyClientServiceServer).GetLists(ctx, req.(*GetListsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WackyTrackyClientService_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WackyTrackyClientServiceServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WackyTrackyClientService_ListTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WackyTrackyClientServiceServer).ListTasks(ctx, req.(*ListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WackyTrackyClientService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WackyTrackyClientServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WackyTrackyClientService_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WackyTrackyClientServiceServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WackyTrackyClientService_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WackyTrackyClientServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WackyTrackyClientService_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WackyTrackyClientServiceServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WackyTrackyClientService_CreateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WackyTrackyClientServiceServer).CreateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WackyTrackyClientService_CreateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WackyTrackyClientServiceServer).CreateList(ctx, req.(*CreateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WackyTrackyClientService_Tag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WackyTrackyClientServiceServer).Tag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WackyTrackyClientService_Tag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WackyTrackyClientServiceServer).Tag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WackyTrackyClientService_UpdateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WackyTrackyClientServiceServer).UpdateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WackyTrackyClientService_UpdateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WackyTrackyClientServiceServer).UpdateList(ctx, req.(*UpdateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WackyTrackyClientService_GetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WackyTrackyClientServiceServer).GetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WackyTrackyClientService_GetTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WackyTrackyClientServiceServer).GetTags(ctx, req.(*GetTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WackyTrackyClientService_ServiceDesc is the grpc.ServiceDesc for WackyTrackyClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WackyTrackyClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wackytracky.v1.WackyTrackyClientService",
	HandlerType: (*WackyTrackyClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _WackyTrackyClientService_Version_Handler,
		},
		{
			MethodName: "Init",
			Handler:    _WackyTrackyClientService_Init_Handler,
		},
		{
			MethodName: "GetLists",
			Handler:    _WackyTrackyClientService_GetLists_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _WackyTrackyClientService_ListTasks_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _WackyTrackyClientService_CreateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _WackyTrackyClientService_DeleteTask_Handler,
		},
		{
			MethodName: "CreateList",
			Handler:    _WackyTrackyClientService_CreateList_Handler,
		},
		{
			MethodName: "Tag",
			Handler:    _WackyTrackyClientService_Tag_Handler,
		},
		{
			MethodName: "UpdateList",
			Handler:    _WackyTrackyClientService_UpdateList_Handler,
		},
		{
			MethodName: "GetTags",
			Handler:    _WackyTrackyClientService_GetTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wt.proto",
}
