// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: wacky-tracky/clientapi/v1/wt.proto

package clientv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/wacky-tracky/wacky-tracky-server/gen/wacky-tracky/clientapi/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WackyTrackyClientServiceName is the fully-qualified name of the WackyTrackyClientService service.
	WackyTrackyClientServiceName = "wackytracky.clientapi.v1.WackyTrackyClientService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WackyTrackyClientServiceVersionProcedure is the fully-qualified name of the
	// WackyTrackyClientService's Version RPC.
	WackyTrackyClientServiceVersionProcedure = "/wackytracky.clientapi.v1.WackyTrackyClientService/Version"
	// WackyTrackyClientServiceInitProcedure is the fully-qualified name of the
	// WackyTrackyClientService's Init RPC.
	WackyTrackyClientServiceInitProcedure = "/wackytracky.clientapi.v1.WackyTrackyClientService/Init"
	// WackyTrackyClientServiceGetListsProcedure is the fully-qualified name of the
	// WackyTrackyClientService's GetLists RPC.
	WackyTrackyClientServiceGetListsProcedure = "/wackytracky.clientapi.v1.WackyTrackyClientService/GetLists"
	// WackyTrackyClientServiceListTasksProcedure is the fully-qualified name of the
	// WackyTrackyClientService's ListTasks RPC.
	WackyTrackyClientServiceListTasksProcedure = "/wackytracky.clientapi.v1.WackyTrackyClientService/ListTasks"
	// WackyTrackyClientServiceCreateTaskProcedure is the fully-qualified name of the
	// WackyTrackyClientService's CreateTask RPC.
	WackyTrackyClientServiceCreateTaskProcedure = "/wackytracky.clientapi.v1.WackyTrackyClientService/CreateTask"
	// WackyTrackyClientServiceDeleteTaskProcedure is the fully-qualified name of the
	// WackyTrackyClientService's DeleteTask RPC.
	WackyTrackyClientServiceDeleteTaskProcedure = "/wackytracky.clientapi.v1.WackyTrackyClientService/DeleteTask"
	// WackyTrackyClientServiceCreateListProcedure is the fully-qualified name of the
	// WackyTrackyClientService's CreateList RPC.
	WackyTrackyClientServiceCreateListProcedure = "/wackytracky.clientapi.v1.WackyTrackyClientService/CreateList"
	// WackyTrackyClientServiceTagProcedure is the fully-qualified name of the
	// WackyTrackyClientService's Tag RPC.
	WackyTrackyClientServiceTagProcedure = "/wackytracky.clientapi.v1.WackyTrackyClientService/Tag"
	// WackyTrackyClientServiceUpdateListProcedure is the fully-qualified name of the
	// WackyTrackyClientService's UpdateList RPC.
	WackyTrackyClientServiceUpdateListProcedure = "/wackytracky.clientapi.v1.WackyTrackyClientService/UpdateList"
	// WackyTrackyClientServiceGetTagsProcedure is the fully-qualified name of the
	// WackyTrackyClientService's GetTags RPC.
	WackyTrackyClientServiceGetTagsProcedure = "/wackytracky.clientapi.v1.WackyTrackyClientService/GetTags"
)

// WackyTrackyClientServiceClient is a client for the
// wackytracky.clientapi.v1.WackyTrackyClientService service.
type WackyTrackyClientServiceClient interface {
	Version(context.Context, *connect.Request[v1.VersionRequest]) (*connect.Response[v1.VersionResponse], error)
	Init(context.Context, *connect.Request[v1.InitRequest]) (*connect.Response[v1.InitResponse], error)
	GetLists(context.Context, *connect.Request[v1.GetListsRequest]) (*connect.Response[v1.GetListsResponse], error)
	ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error)
	CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error)
	DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error)
	CreateList(context.Context, *connect.Request[v1.CreateListRequest]) (*connect.Response[v1.CreateListResponse], error)
	Tag(context.Context, *connect.Request[v1.TagRequest]) (*connect.Response[v1.TagResponse], error)
	UpdateList(context.Context, *connect.Request[v1.UpdateListRequest]) (*connect.Response[v1.UpdateListResponse], error)
	GetTags(context.Context, *connect.Request[v1.GetTagsRequest]) (*connect.Response[v1.GetTagsResponse], error)
}

// NewWackyTrackyClientServiceClient constructs a client for the
// wackytracky.clientapi.v1.WackyTrackyClientService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWackyTrackyClientServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WackyTrackyClientServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	wackyTrackyClientServiceMethods := v1.File_wacky_tracky_clientapi_v1_wt_proto.Services().ByName("WackyTrackyClientService").Methods()
	return &wackyTrackyClientServiceClient{
		version: connect.NewClient[v1.VersionRequest, v1.VersionResponse](
			httpClient,
			baseURL+WackyTrackyClientServiceVersionProcedure,
			connect.WithSchema(wackyTrackyClientServiceMethods.ByName("Version")),
			connect.WithClientOptions(opts...),
		),
		init: connect.NewClient[v1.InitRequest, v1.InitResponse](
			httpClient,
			baseURL+WackyTrackyClientServiceInitProcedure,
			connect.WithSchema(wackyTrackyClientServiceMethods.ByName("Init")),
			connect.WithClientOptions(opts...),
		),
		getLists: connect.NewClient[v1.GetListsRequest, v1.GetListsResponse](
			httpClient,
			baseURL+WackyTrackyClientServiceGetListsProcedure,
			connect.WithSchema(wackyTrackyClientServiceMethods.ByName("GetLists")),
			connect.WithClientOptions(opts...),
		),
		listTasks: connect.NewClient[v1.ListTasksRequest, v1.ListTasksResponse](
			httpClient,
			baseURL+WackyTrackyClientServiceListTasksProcedure,
			connect.WithSchema(wackyTrackyClientServiceMethods.ByName("ListTasks")),
			connect.WithClientOptions(opts...),
		),
		createTask: connect.NewClient[v1.CreateTaskRequest, v1.CreateTaskResponse](
			httpClient,
			baseURL+WackyTrackyClientServiceCreateTaskProcedure,
			connect.WithSchema(wackyTrackyClientServiceMethods.ByName("CreateTask")),
			connect.WithClientOptions(opts...),
		),
		deleteTask: connect.NewClient[v1.DeleteTaskRequest, v1.DeleteTaskResponse](
			httpClient,
			baseURL+WackyTrackyClientServiceDeleteTaskProcedure,
			connect.WithSchema(wackyTrackyClientServiceMethods.ByName("DeleteTask")),
			connect.WithClientOptions(opts...),
		),
		createList: connect.NewClient[v1.CreateListRequest, v1.CreateListResponse](
			httpClient,
			baseURL+WackyTrackyClientServiceCreateListProcedure,
			connect.WithSchema(wackyTrackyClientServiceMethods.ByName("CreateList")),
			connect.WithClientOptions(opts...),
		),
		tag: connect.NewClient[v1.TagRequest, v1.TagResponse](
			httpClient,
			baseURL+WackyTrackyClientServiceTagProcedure,
			connect.WithSchema(wackyTrackyClientServiceMethods.ByName("Tag")),
			connect.WithClientOptions(opts...),
		),
		updateList: connect.NewClient[v1.UpdateListRequest, v1.UpdateListResponse](
			httpClient,
			baseURL+WackyTrackyClientServiceUpdateListProcedure,
			connect.WithSchema(wackyTrackyClientServiceMethods.ByName("UpdateList")),
			connect.WithClientOptions(opts...),
		),
		getTags: connect.NewClient[v1.GetTagsRequest, v1.GetTagsResponse](
			httpClient,
			baseURL+WackyTrackyClientServiceGetTagsProcedure,
			connect.WithSchema(wackyTrackyClientServiceMethods.ByName("GetTags")),
			connect.WithClientOptions(opts...),
		),
	}
}

// wackyTrackyClientServiceClient implements WackyTrackyClientServiceClient.
type wackyTrackyClientServiceClient struct {
	version    *connect.Client[v1.VersionRequest, v1.VersionResponse]
	init       *connect.Client[v1.InitRequest, v1.InitResponse]
	getLists   *connect.Client[v1.GetListsRequest, v1.GetListsResponse]
	listTasks  *connect.Client[v1.ListTasksRequest, v1.ListTasksResponse]
	createTask *connect.Client[v1.CreateTaskRequest, v1.CreateTaskResponse]
	deleteTask *connect.Client[v1.DeleteTaskRequest, v1.DeleteTaskResponse]
	createList *connect.Client[v1.CreateListRequest, v1.CreateListResponse]
	tag        *connect.Client[v1.TagRequest, v1.TagResponse]
	updateList *connect.Client[v1.UpdateListRequest, v1.UpdateListResponse]
	getTags    *connect.Client[v1.GetTagsRequest, v1.GetTagsResponse]
}

// Version calls wackytracky.clientapi.v1.WackyTrackyClientService.Version.
func (c *wackyTrackyClientServiceClient) Version(ctx context.Context, req *connect.Request[v1.VersionRequest]) (*connect.Response[v1.VersionResponse], error) {
	return c.version.CallUnary(ctx, req)
}

// Init calls wackytracky.clientapi.v1.WackyTrackyClientService.Init.
func (c *wackyTrackyClientServiceClient) Init(ctx context.Context, req *connect.Request[v1.InitRequest]) (*connect.Response[v1.InitResponse], error) {
	return c.init.CallUnary(ctx, req)
}

// GetLists calls wackytracky.clientapi.v1.WackyTrackyClientService.GetLists.
func (c *wackyTrackyClientServiceClient) GetLists(ctx context.Context, req *connect.Request[v1.GetListsRequest]) (*connect.Response[v1.GetListsResponse], error) {
	return c.getLists.CallUnary(ctx, req)
}

// ListTasks calls wackytracky.clientapi.v1.WackyTrackyClientService.ListTasks.
func (c *wackyTrackyClientServiceClient) ListTasks(ctx context.Context, req *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error) {
	return c.listTasks.CallUnary(ctx, req)
}

// CreateTask calls wackytracky.clientapi.v1.WackyTrackyClientService.CreateTask.
func (c *wackyTrackyClientServiceClient) CreateTask(ctx context.Context, req *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error) {
	return c.createTask.CallUnary(ctx, req)
}

// DeleteTask calls wackytracky.clientapi.v1.WackyTrackyClientService.DeleteTask.
func (c *wackyTrackyClientServiceClient) DeleteTask(ctx context.Context, req *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error) {
	return c.deleteTask.CallUnary(ctx, req)
}

// CreateList calls wackytracky.clientapi.v1.WackyTrackyClientService.CreateList.
func (c *wackyTrackyClientServiceClient) CreateList(ctx context.Context, req *connect.Request[v1.CreateListRequest]) (*connect.Response[v1.CreateListResponse], error) {
	return c.createList.CallUnary(ctx, req)
}

// Tag calls wackytracky.clientapi.v1.WackyTrackyClientService.Tag.
func (c *wackyTrackyClientServiceClient) Tag(ctx context.Context, req *connect.Request[v1.TagRequest]) (*connect.Response[v1.TagResponse], error) {
	return c.tag.CallUnary(ctx, req)
}

// UpdateList calls wackytracky.clientapi.v1.WackyTrackyClientService.UpdateList.
func (c *wackyTrackyClientServiceClient) UpdateList(ctx context.Context, req *connect.Request[v1.UpdateListRequest]) (*connect.Response[v1.UpdateListResponse], error) {
	return c.updateList.CallUnary(ctx, req)
}

// GetTags calls wackytracky.clientapi.v1.WackyTrackyClientService.GetTags.
func (c *wackyTrackyClientServiceClient) GetTags(ctx context.Context, req *connect.Request[v1.GetTagsRequest]) (*connect.Response[v1.GetTagsResponse], error) {
	return c.getTags.CallUnary(ctx, req)
}

// WackyTrackyClientServiceHandler is an implementation of the
// wackytracky.clientapi.v1.WackyTrackyClientService service.
type WackyTrackyClientServiceHandler interface {
	Version(context.Context, *connect.Request[v1.VersionRequest]) (*connect.Response[v1.VersionResponse], error)
	Init(context.Context, *connect.Request[v1.InitRequest]) (*connect.Response[v1.InitResponse], error)
	GetLists(context.Context, *connect.Request[v1.GetListsRequest]) (*connect.Response[v1.GetListsResponse], error)
	ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error)
	CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error)
	DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error)
	CreateList(context.Context, *connect.Request[v1.CreateListRequest]) (*connect.Response[v1.CreateListResponse], error)
	Tag(context.Context, *connect.Request[v1.TagRequest]) (*connect.Response[v1.TagResponse], error)
	UpdateList(context.Context, *connect.Request[v1.UpdateListRequest]) (*connect.Response[v1.UpdateListResponse], error)
	GetTags(context.Context, *connect.Request[v1.GetTagsRequest]) (*connect.Response[v1.GetTagsResponse], error)
}

// NewWackyTrackyClientServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWackyTrackyClientServiceHandler(svc WackyTrackyClientServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	wackyTrackyClientServiceMethods := v1.File_wacky_tracky_clientapi_v1_wt_proto.Services().ByName("WackyTrackyClientService").Methods()
	wackyTrackyClientServiceVersionHandler := connect.NewUnaryHandler(
		WackyTrackyClientServiceVersionProcedure,
		svc.Version,
		connect.WithSchema(wackyTrackyClientServiceMethods.ByName("Version")),
		connect.WithHandlerOptions(opts...),
	)
	wackyTrackyClientServiceInitHandler := connect.NewUnaryHandler(
		WackyTrackyClientServiceInitProcedure,
		svc.Init,
		connect.WithSchema(wackyTrackyClientServiceMethods.ByName("Init")),
		connect.WithHandlerOptions(opts...),
	)
	wackyTrackyClientServiceGetListsHandler := connect.NewUnaryHandler(
		WackyTrackyClientServiceGetListsProcedure,
		svc.GetLists,
		connect.WithSchema(wackyTrackyClientServiceMethods.ByName("GetLists")),
		connect.WithHandlerOptions(opts...),
	)
	wackyTrackyClientServiceListTasksHandler := connect.NewUnaryHandler(
		WackyTrackyClientServiceListTasksProcedure,
		svc.ListTasks,
		connect.WithSchema(wackyTrackyClientServiceMethods.ByName("ListTasks")),
		connect.WithHandlerOptions(opts...),
	)
	wackyTrackyClientServiceCreateTaskHandler := connect.NewUnaryHandler(
		WackyTrackyClientServiceCreateTaskProcedure,
		svc.CreateTask,
		connect.WithSchema(wackyTrackyClientServiceMethods.ByName("CreateTask")),
		connect.WithHandlerOptions(opts...),
	)
	wackyTrackyClientServiceDeleteTaskHandler := connect.NewUnaryHandler(
		WackyTrackyClientServiceDeleteTaskProcedure,
		svc.DeleteTask,
		connect.WithSchema(wackyTrackyClientServiceMethods.ByName("DeleteTask")),
		connect.WithHandlerOptions(opts...),
	)
	wackyTrackyClientServiceCreateListHandler := connect.NewUnaryHandler(
		WackyTrackyClientServiceCreateListProcedure,
		svc.CreateList,
		connect.WithSchema(wackyTrackyClientServiceMethods.ByName("CreateList")),
		connect.WithHandlerOptions(opts...),
	)
	wackyTrackyClientServiceTagHandler := connect.NewUnaryHandler(
		WackyTrackyClientServiceTagProcedure,
		svc.Tag,
		connect.WithSchema(wackyTrackyClientServiceMethods.ByName("Tag")),
		connect.WithHandlerOptions(opts...),
	)
	wackyTrackyClientServiceUpdateListHandler := connect.NewUnaryHandler(
		WackyTrackyClientServiceUpdateListProcedure,
		svc.UpdateList,
		connect.WithSchema(wackyTrackyClientServiceMethods.ByName("UpdateList")),
		connect.WithHandlerOptions(opts...),
	)
	wackyTrackyClientServiceGetTagsHandler := connect.NewUnaryHandler(
		WackyTrackyClientServiceGetTagsProcedure,
		svc.GetTags,
		connect.WithSchema(wackyTrackyClientServiceMethods.ByName("GetTags")),
		connect.WithHandlerOptions(opts...),
	)
	return "/wackytracky.clientapi.v1.WackyTrackyClientService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WackyTrackyClientServiceVersionProcedure:
			wackyTrackyClientServiceVersionHandler.ServeHTTP(w, r)
		case WackyTrackyClientServiceInitProcedure:
			wackyTrackyClientServiceInitHandler.ServeHTTP(w, r)
		case WackyTrackyClientServiceGetListsProcedure:
			wackyTrackyClientServiceGetListsHandler.ServeHTTP(w, r)
		case WackyTrackyClientServiceListTasksProcedure:
			wackyTrackyClientServiceListTasksHandler.ServeHTTP(w, r)
		case WackyTrackyClientServiceCreateTaskProcedure:
			wackyTrackyClientServiceCreateTaskHandler.ServeHTTP(w, r)
		case WackyTrackyClientServiceDeleteTaskProcedure:
			wackyTrackyClientServiceDeleteTaskHandler.ServeHTTP(w, r)
		case WackyTrackyClientServiceCreateListProcedure:
			wackyTrackyClientServiceCreateListHandler.ServeHTTP(w, r)
		case WackyTrackyClientServiceTagProcedure:
			wackyTrackyClientServiceTagHandler.ServeHTTP(w, r)
		case WackyTrackyClientServiceUpdateListProcedure:
			wackyTrackyClientServiceUpdateListHandler.ServeHTTP(w, r)
		case WackyTrackyClientServiceGetTagsProcedure:
			wackyTrackyClientServiceGetTagsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWackyTrackyClientServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWackyTrackyClientServiceHandler struct{}

func (UnimplementedWackyTrackyClientServiceHandler) Version(context.Context, *connect.Request[v1.VersionRequest]) (*connect.Response[v1.VersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wackytracky.clientapi.v1.WackyTrackyClientService.Version is not implemented"))
}

func (UnimplementedWackyTrackyClientServiceHandler) Init(context.Context, *connect.Request[v1.InitRequest]) (*connect.Response[v1.InitResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wackytracky.clientapi.v1.WackyTrackyClientService.Init is not implemented"))
}

func (UnimplementedWackyTrackyClientServiceHandler) GetLists(context.Context, *connect.Request[v1.GetListsRequest]) (*connect.Response[v1.GetListsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wackytracky.clientapi.v1.WackyTrackyClientService.GetLists is not implemented"))
}

func (UnimplementedWackyTrackyClientServiceHandler) ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wackytracky.clientapi.v1.WackyTrackyClientService.ListTasks is not implemented"))
}

func (UnimplementedWackyTrackyClientServiceHandler) CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wackytracky.clientapi.v1.WackyTrackyClientService.CreateTask is not implemented"))
}

func (UnimplementedWackyTrackyClientServiceHandler) DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wackytracky.clientapi.v1.WackyTrackyClientService.DeleteTask is not implemented"))
}

func (UnimplementedWackyTrackyClientServiceHandler) CreateList(context.Context, *connect.Request[v1.CreateListRequest]) (*connect.Response[v1.CreateListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wackytracky.clientapi.v1.WackyTrackyClientService.CreateList is not implemented"))
}

func (UnimplementedWackyTrackyClientServiceHandler) Tag(context.Context, *connect.Request[v1.TagRequest]) (*connect.Response[v1.TagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wackytracky.clientapi.v1.WackyTrackyClientService.Tag is not implemented"))
}

func (UnimplementedWackyTrackyClientServiceHandler) UpdateList(context.Context, *connect.Request[v1.UpdateListRequest]) (*connect.Response[v1.UpdateListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wackytracky.clientapi.v1.WackyTrackyClientService.UpdateList is not implemented"))
}

func (UnimplementedWackyTrackyClientServiceHandler) GetTags(context.Context, *connect.Request[v1.GetTagsRequest]) (*connect.Response[v1.GetTagsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wackytracky.clientapi.v1.WackyTrackyClientService.GetTags is not implemented"))
}
